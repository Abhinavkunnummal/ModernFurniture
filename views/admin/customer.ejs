<%- include('/home/ubuntu/ModernFurniture/views/admin_Layouts/header.ejs') %>
<%- include('/home/ubuntu/ModernFurniture/views/admin_Layouts/sidenav.ejs') %>


<main class="main-wrap">
    <header class="main-header navbar">
        <h3>Customers Dashboard</h3>
        <!-- Header content -->
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    </header>

    <section class="content-main">
        <div class="table-responsive">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>No</th>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Mobile</th>
                        <th>Status</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    <% users.forEach((user,index) => {%>
                        <tr>
                            <td><%= index + 1 %></td>
                            <td><%= user.name %></td>
                            <td><%= user.email%></td>
                            <td><%= user.mobile %></td>
                            <td><span id="status-<%= user._id %>" class="badge  <%= user.is_blocked ? 'bg-secondary':'bg-success' %>">
                                <%= user.is_blocked ?'Inactive':'Active' %> 
                            </span>
                            </td>
                            <td>
                                <div class="btn-group" role="group">
                                    <% if(user.is_blocked) {%>
                                        <button onclick="handleUnblock('<%= user._id%>') " id="unblockButton-<%=user._id %>" class="btn btn-success" data-bs-toggle="tooltip" data-bs-placement="top" title="Unblock User" >Unblock</button>
                                    <% } else {%>
                                        <button onclick="handleBlock('<%= user._id %>')" id="blockButton-<%= user._id %>" class="btn btn-warning" data-bs-toggle="tooltip" data-bs-placement="top" title="Block User">
                                            Block
                                          </button>
                                        <% } %>
                                </div>
                            </td>
                        </tr>
                  <%  }); %>
                </tbody>
            </table>
        </div>
    </section>

    <%- include('/home/ubuntu/ModernFurniture/views/admin_Layouts/footer.ejs') %>
</main>
<script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
<script>
  
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl);
    });
  
    async function handleBlock(userId) {
  const confirmation = await confirmAction("block");
  if (confirmation) {
    try {
      const response = await fetch("/admin/block", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId }),
      });

      if (response.ok) {
        const statusSpan = document.querySelector(`#status-${userId}`);
        const blockButton = document.querySelector(`#blockButton-${userId}`);
        if (statusSpan && blockButton) {
          statusSpan.textContent = "Inactive";
          statusSpan.classList.remove("bg-success");
          statusSpan.classList.add("bg-secondary");
          blockButton.textContent = "Unblock";
          blockButton.classList.remove("btn-warning");
          blockButton.classList.add("btn-success");
          blockButton.setAttribute("onclick", `handleUnblock('${userId}')`);
          blockButton.setAttribute("title", "Unblock User");
          blockButton.setAttribute("id", `unblockButton-${userId}`);
        }
        swal("Success", "User blocked successfully", "success");
      } else {
        swal("Error", "Failed to block user", "error");
        console.error("Failed to block user:", response.status);
      }
    } catch (error) {
      console.error("Error blocking user:", error.message);
      swal("Error", "An error occurred while blocking the user", "error");
    }
  }
}

async function handleUnblock(userId) {
  const confirmation = await confirmAction("unblock");
  if (confirmation) {
    try {
      const response = await fetch("/admin/unblock", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ userId }),
      });

      if (response.ok) {
        const statusSpan = document.querySelector(`#status-${userId}`);
        const unblockButton = document.querySelector(`#unblockButton-${userId}`);
        if (statusSpan && unblockButton) {
          statusSpan.textContent = "Active";
          statusSpan.classList.remove("bg-secondary");
          statusSpan.classList.add("bg-success");
          unblockButton.textContent = "Block";
          unblockButton.classList.remove("btn-success");
          unblockButton.classList.add("btn-warning");
          unblockButton.setAttribute("onclick", `handleBlock('${userId}')`);
          unblockButton.setAttribute("title", "Block User");
          unblockButton.setAttribute("id", `blockButton-${userId}`);
        }
        swal("Success", "User unblocked successfully", "success");
      } else {
        swal("Error", "Failed to unblock user", "error");
        console.error("Failed to unblock user:", response.status);
      }
    } catch (error) {
      console.error("Error unblocking user:", error.message);
      swal("Error", "An error occurred while unblocking the user", "error");
    }
  }
}

async function confirmAction(action) {
  let confirmationText;
  switch (action) {
    case "block":
      confirmationText = "block this user";
      break;
    case "unblock":
      confirmationText = "unblock this user";
      break;
    default:
      confirmationText = "perform this action";
  }

  return new Promise((resolve) => {
    swal({
      title:` Are you sure you want to ${confirmationText}?`,
      text: "Once confirmed, the action cannot be undone.",
      icon: "warning",
      buttons: ["Cancel", "Confirm"],
      dangerMode: true,
    }).then((confirmed) => {
      resolve(confirmed);
    });
  });
}
</script>